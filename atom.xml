<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>跳跳魔王的技术博客</title>
  
  <subtitle>科技改变生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-09T03:20:12.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>跳跳魔王</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>删除一个节点</title>
    <link href="http://yoursite.com/2018/03/09/%E9%93%BE%E8%A1%A8%20%7C%20%E7%AC%AC%203%20%E8%AF%BE%20(%E5%88%A0%E9%99%A4%E4%B8%80%E4%B8%AA%E8%8A%82%E7%82%B9)/"/>
    <id>http://yoursite.com/2018/03/09/链表 | 第 3 课 (删除一个节点)/</id>
    <published>2018-03-09T01:02:05.000Z</published>
    <updated>2018-03-09T03:20:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>We have discussed <a href="">Linked List Introduction</a> and <a href="">Linked List Insertion</a> in previous posts on singly linked list.</p><p>Let us formulate the problem statement to understand the deletion process. Given a ‘key’, delete the first occurrence of this key in linked list.<br>To delete a node from linked list, we need to do following steps.<br>1) Find previous node of the node to be deleted.<br>2) Changed next of previous node.<br>3) Free memory for the node to be deleted.</p><p>linkedlist_deletion</p><p>Recommended: Please solve it on “PRACTICE” first, before moving on to the solution.</p><p>Since every node of linked list is dynamically allocated using malloc() in C, we need to call free() for freeing memory allocated for the node to be deleted.</p><pre><code>// A complete working C program to demonstrate deletion in singly// linked list#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;// A linked list nodestruct Node{    int data;    struct Node *next;};/* Given a reference (pointer to pointer) to the head of a list   and an int, inserts a new node on the front of the list. */void push(struct Node** head_ref, int new_data){    struct Node* new_node = (struct Node*) malloc(sizeof(struct Node));    new_node-&gt;data  = new_data;    new_node-&gt;next = (*head_ref);    (*head_ref)    = new_node;}/* Given a reference (pointer to pointer) to the head of a list   and a key, deletes the first occurrence of key in linked list */void deleteNode(struct Node **head_ref, int key){    // Store head node    struct Node* temp = *head_ref, *prev;    // If head node itself holds the key to be deleted    if (temp != NULL &amp;&amp; temp-&gt;data == key)    {        *head_ref = temp-&gt;next;   // Changed head        free(temp);               // free old head        return;    }    // Search for the key to be deleted, keep track of the    // previous node as we need to change &apos;prev-&gt;next&apos;    while (temp != NULL &amp;&amp; temp-&gt;data != key)    {        prev = temp;        temp = temp-&gt;next;    }    // If key was not present in linked list    if (temp == NULL) return;    // Unlink the node from linked list    prev-&gt;next = temp-&gt;next;    free(temp);  // Free memory}// This function prints contents of linked list starting from // the given nodevoid printList(struct Node *node){    while (node != NULL)    {        printf(&quot; %d &quot;, node-&gt;data);        node = node-&gt;next;    }}/* Drier program to test above functions*/int main(){    /* Start with the empty list */    struct Node* head = NULL;    push(&amp;head, 7);    push(&amp;head, 1);    push(&amp;head, 3);    push(&amp;head, 2);    puts(&quot;Created Linked List: &quot;);    printList(head);    deleteNode(&amp;head, 1);    puts(&quot;\nLinked List after Deletion of 1: &quot;);    printList(head);    return 0;}</code></pre><h3 id="Run-on-IDE"><a href="#Run-on-IDE" class="headerlink" title="Run on IDE"></a>Run on IDE</h3><p>Output:<br>Created Linked List:<br> 2  3  1  7<br>Linked List after Deletion of 1:<br> 2  3  7</p><iframe width="560" height="315" src="https://youtu.be/DoNRZTumxB0" frameborder="0" allowfullscreen></iframe><p>Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;We have discussed &lt;a href=&quot;&quot;&gt;Linked List Introduction&lt;/a&gt; and &lt;a href=&quot;&quot;&gt;Linked List Insertion&lt;/a&gt; in previous posts on singly linked lis
      
    
    </summary>
    
    
  </entry>
  
</feed>
